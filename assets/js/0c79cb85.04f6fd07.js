(self.webpackChunkmeta_system_docs=self.webpackChunkmeta_system_docs||[]).push([[3832],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),l=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return i.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?i.createElement(f,a(a({ref:t},u),{},{components:n})):i.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3601:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var i=n(2122),r=n(9756),o=(n(7294),n(3905)),a=["components"],s={sidebar_position:5},c="Meta-System CLI",l={unversionedId:"api-docs/using-the-cli",id:"api-docs/using-the-cli",isDocsHomePage:!1,title:"Meta-System CLI",description:"This Page is under construction",source:"@site/docs/api-docs/using-the-cli.md",sourceDirName:"api-docs",slug:"/api-docs/using-the-cli",permalink:"/meta-system-docs/docs/api-docs/using-the-cli",editUrl:"https://github.com/mapikit/meta-system-docs/edit/main/docs/api-docs/using-the-cli.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docs",previous:{title:"Object Definition",permalink:"/meta-system-docs/docs/api-docs/configuring/object-definition"},next:{title:"Is Nill",permalink:"/meta-system-docs/docs/api-docs/functions/internal-functions/assertion/is-nill"}},u=[{value:"The Arguments",id:"the-arguments",children:[]},{value:"The Flags and Options",id:"the-flags-and-options",children:[{value:"Version",id:"version",children:[]},{value:"Prop Validation Bypass",id:"prop-validation-bypass",children:[]},{value:"Watch JSON file (Dev mode)",id:"watch-json-file-dev-mode",children:[]}]}],p={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"meta-system-cli"},"Meta-System CLI"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This Page is under construction")),(0,o.kt)("p",null,"Meta-System has a pretty simple CLI to use, and here we will list all that it supports."),(0,o.kt)("p",null,'To begin with, there are no other commands than just "run".'),(0,o.kt)("h2",{id:"the-arguments"},"The Arguments"),(0,o.kt)("p",null,"Whenever you use the ",(0,o.kt)("inlineCode",{parentName:"p"},"meta-system")," command, the next argument is the path for the configuration file you are trying to run:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"meta-system <file-to-path>")),(0,o.kt)("h2",{id:"the-flags-and-options"},"The Flags and Options"),(0,o.kt)("h3",{id:"version"},"Version"),(0,o.kt)("p",null,"Firstly, ",(0,o.kt)("inlineCode",{parentName:"p"},"-v")," shows you the version you are running of Meta-System."),(0,o.kt)("h3",{id:"prop-validation-bypass"},"Prop Validation Bypass"),(0,o.kt)("p",null,"Next, we also have a validation bypass flag ",(0,o.kt)("inlineCode",{parentName:"p"},"--skip-prop-validation"),'. This skips the types and arguments validation of the functions inside your BOps. Such validation is still in beta, but in the future, using this flag will show an "unsafe" warning.'),(0,o.kt)("h3",{id:"watch-json-file-dev-mode"},"Watch JSON file (Dev mode)"),(0,o.kt)("p",null,"It is possible to make Meta-System watch for file changes in your configuration files and restart upon changes. To do so, just add the ",(0,o.kt)("inlineCode",{parentName:"p"},"-dev")," flag."))}d.isMDXComponent=!0}}]);